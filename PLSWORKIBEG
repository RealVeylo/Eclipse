if getgenv().eclipsehub then warn("Eclipse Hub is already executed") return end
getgenv().eclipsehub = true

-- No virtualization function wrapper
loadstring([[
    function LPH_NO_VIRTUALIZE(f) return f end;
]])()

-- Services
local debris = game:GetService("Debris")
local contentProvider = game:GetService("ContentProvider")
local scriptContext = game:GetService("ScriptContext")
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local statsService = game:GetService("Stats")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local httpService = game:GetService("HttpService")
local starterGui = game:GetService("StarterGui")
local coreGui = game:GetService("CoreGui")

-- Variables
local player = players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera
local values = replicatedStorage:FindFirstChild("Values")

local IS_PRACTICE = game.PlaceId == 8206123457
local IS_SOLARA = string.match(getexecutorname(), "Solara")
local AC_BYPASS = IS_PRACTICE

local moveToUsing = {}

-- Initialize values if needed
if not values or IS_PRACTICE then
    if replicatedStorage:FindFirstChild("Values") then
        replicatedStorage:FindFirstChild("Values"):Destroy()
    end
    values = Instance.new("Folder")
    local status = Instance.new("StringValue")
    status.Name = "Status"
    status.Value = "InPlay"
    status.Parent = values
    values.Parent = replicatedStorage
    values.Name = "Values"
end

if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end
end

-- Anti-Cheat Bypass
local Handshake = replicatedStorage.Remotes.CharacterSoundEvent
local Hooks = {}
local HandshakeInts = {}

LPH_NO_VIRTUALIZE(function()
    for i, v in getgc() do
        if typeof(v) == "function" and islclosure(v) then
            if (#getprotos(v) == 1) and table.find(getconstants(getproto(v, 1)), 4000001) then
                hookfunction(v, function() end)
            end
        end
    end
end)()

Hooks.__namecall = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(self, ...)
    local Method = getnamecallmethod()
    local Args = {...}

    if not checkcaller() and (self == Handshake) and (Method == "fireServer") and (string.find(Args[1], "AC")) then
        if (#HandshakeInts == 0) then
            HandshakeInts = {table.unpack(Args[2], 2, 18)}
        else
            for i, v in HandshakeInts do
                Args[2][i + 1] = v
            end
        end
    end

    return Hooks.__namecall(self, ...)
end))

task.wait(1)

if not isfolder("eclipsehub") then
    makefolder("eclipsehub")
end

-- Initialize ping and fps counters
local ping = 0
local fps = 0

-- Colors for the Tyrant Hub theme, but with light blue instead of purple
local COLORS = {
    Background = Color3.fromRGB(25, 25, 25), -- Dark background
    Secondary = Color3.fromRGB(30, 30, 30), -- Slightly darker for panels
    Accent = Color3.fromRGB(40, 169, 255), -- Light blue accent (instead of purple)
    Text = Color3.fromRGB(255, 255, 255), -- White text
    SubText = Color3.fromRGB(200, 200, 200), -- Light gray for subtext
    Border = Color3.fromRGB(40, 40, 40) -- Dark border
}

-- Create the UI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "EclipseHub"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = (gethui and gethui()) or coreGui

-- Main frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 500, 0, 300) -- Smaller than the original
MainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
MainFrame.BackgroundColor3 = COLORS.Background
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Visible = true
MainFrame.Parent = ScreenGui

-- Add corner radius
local Corner = Instance.new("UICorner")
Corner.CornerRadius = UDim.new(0, 6)
Corner.Parent = MainFrame

-- Top bar with title
local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.Position = UDim2.new(0, 0, 0, 0)
TopBar.BackgroundColor3 = COLORS.Background
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

-- Header background
local Header = Instance.new("Frame")
Header.Name = "Header"
Header.Size = UDim2.new(1, 0, 0, 60)
Header.Position = UDim2.new(0, 0, 0, 0)
Header.BackgroundColor3 = COLORS.Secondary
Header.BorderSizePixel = 0
Header.Parent = MainFrame

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 6)
HeaderCorner.Parent = Header

-- Fix the bottom corners of the header
local HeaderFix = Instance.new("Frame")
HeaderFix.Name = "HeaderFix"
HeaderFix.Size = UDim2.new(1, 0, 0, 30)
HeaderFix.Position = UDim2.new(0, 0, 1, -30)
HeaderFix.BackgroundColor3 = COLORS.Secondary
HeaderFix.BorderSizePixel = 0
HeaderFix.ZIndex = 0
HeaderFix.Parent = Header

-- Title text
local TitleText = Instance.new("TextLabel")
TitleText.Name = "Title"
TitleText.Size = UDim2.new(1, 0, 0, 60)
TitleText.Position = UDim2.new(0, 20, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Font = Enum.Font.GothamBold
TitleText.Text = "ECLIPSE HUB"
TitleText.TextColor3 = COLORS.Accent
TitleText.TextSize = 28
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Parent = Header

-- Version text
local VersionText = Instance.new("TextLabel")
VersionText.Name = "Version"
VersionText.Size = UDim2.new(0, 100, 0, 20)
VersionText.Position = UDim2.new(1, -110, 0, 20)
VersionText.BackgroundTransparency = 1
VersionText.Font = Enum.Font.GothamSemibold
VersionText.Text = "V2.0"
VersionText.TextColor3 = COLORS.Accent
VersionText.TextSize = 16
VersionText.TextXAlignment = Enum.TextXAlignment.Right
VersionText.Parent = Header

-- Close button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 24, 0, 24)
CloseButton.Position = UDim2.new(1, -30, 0, 18)
CloseButton.BackgroundColor3 = COLORS.Background
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "X"
CloseButton.TextColor3 = COLORS.Text
CloseButton.TextSize = 14
CloseButton.Parent = Header

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 4)
CloseCorner.Parent = CloseButton

-- Minimize button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 24, 0, 24)
MinimizeButton.Position = UDim2.new(1, -60, 0, 18)
MinimizeButton.BackgroundColor3 = COLORS.Background
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = COLORS.Text
MinimizeButton.TextSize = 18
MinimizeButton.Parent = Header

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 4)
MinimizeCorner.Parent = MinimizeButton

-- Tab container
local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(0, 130, 1, -60)
TabContainer.Position = UDim2.new(0, 0, 0, 60)
TabContainer.BackgroundColor3 = COLORS.Secondary
TabContainer.BorderSizePixel = 0
TabContainer.Parent = MainFrame

-- Add rounded corners to tab container but only bottom left
local TabCorner = Instance.new("UICorner")
TabCorner.CornerRadius = UDim.new(0, 6)
TabCorner.Parent = TabContainer

-- Fix the right side of tab container to avoid rounding
local TabFix = Instance.new("Frame")
TabFix.Name = "TabFix"
TabFix.Size = UDim2.new(0, 6, 1, 0)
TabFix.Position = UDim2.new(1, -6, 0, 0)
TabFix.BackgroundColor3 = COLORS.Secondary
TabFix.BorderSizePixel = 0
TabFix.Parent = TabContainer

-- Create tab list scroll frame
local TabScroll = Instance.new("ScrollingFrame")
TabScroll.Name = "TabScroll"
TabScroll.Size = UDim2.new(1, -4, 1, -6)
TabScroll.Position = UDim2.new(0, 2, 0, 4)
TabScroll.BackgroundTransparency = 1
TabScroll.ScrollBarThickness = 2
TabScroll.ScrollBarImageColor3 = COLORS.Accent
TabScroll.BorderSizePixel = 0
TabScroll.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be adjusted as tabs are added
TabScroll.Parent = TabContainer

-- Create tab list layout
local TabListLayout = Instance.new("UIListLayout")
TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabListLayout.Padding = UDim.new(0, 8)
TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
TabListLayout.Parent = TabScroll

-- Create tab padding
local TabPadding = Instance.new("UIPadding")
TabPadding.PaddingTop = UDim.new(0, 5)
TabPadding.PaddingBottom = UDim.new(0, 5)
TabPadding.Parent = TabScroll

-- Create content container
local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Size = UDim2.new(1, -130, 1, -60)
ContentContainer.Position = UDim2.new(0, 130, 0, 60)
ContentContainer.BackgroundColor3 = COLORS.Background
ContentContainer.BorderSizePixel = 0
ContentContainer.Parent = MainFrame

-- Create minimize mode UI (shown when the UI is minimized)
local MinUI = Instance.new("Frame")
MinUI.Name = "MinUI"
MinUI.Size = UDim2.new(0, 40, 0, 40)
MinUI.Position = UDim2.new(0, 10, 0.5, -20)
MinUI.BackgroundColor3 = COLORS.Background
MinUI.BorderSizePixel = 0
MinUI.Visible = false
MinUI.Active = true
MinUI.Draggable = true
MinUI.Parent = ScreenGui

-- Add corner radius to min UI
local MinCorner = Instance.new("UICorner")
MinCorner.CornerRadius = UDim.new(0, 6)
MinCorner.Parent = MinUI

-- Add logo text to min UI
local MinLogo = Instance.new("TextButton")
MinLogo.Name = "MinLogo"
MinLogo.Size = UDim2.new(1, -4, 1, -4)
MinLogo.Position = UDim2.new(0, 2, 0, 2)
MinLogo.BackgroundColor3 = COLORS.Secondary
MinLogo.BorderSizePixel = 0
MinLogo.Font = Enum.Font.GothamBold
MinLogo.Text = "EH"
MinLogo.TextColor3 = COLORS.Accent
MinLogo.TextSize = 16
MinLogo.Parent = MinUI

-- Add corner radius to min logo
local MinLogoCorner = Instance.new("UICorner")
MinLogoCorner.CornerRadius = UDim.new(0, 6)
MinLogoCorner.Parent = MinLogo

-- Add category tabs
local CategoryInfo = {
    {Name = "Catching", LayoutOrder = 1},
    {Name = "Physics", LayoutOrder = 2},
    {Name = "Auto", LayoutOrder = 3},
    {Name = "Throwing", LayoutOrder = 4},
    {Name = "Player", LayoutOrder = 5},
    {Name = "Configs", LayoutOrder = 6}
}

-- Dictionary to store category pages
local CategoryPages = {}
-- Track active category
local ActiveCategory = nil

-- Function to create a category tab
local function CreateCategoryTab(name, layoutOrder)
    -- Create the tab button
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name.."Tab"
    TabButton.Size = UDim2.new(0.9, 0, 0, 36)
    TabButton.BackgroundColor3 = COLORS.Background
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.GothamSemibold
    TabButton.Text = name
    TabButton.TextColor3 = COLORS.Text
    TabButton.TextSize = 15
    TabButton.LayoutOrder = layoutOrder
    TabButton.Parent = TabScroll

    -- Add corner radius to tab button
    local TabButtonCorner = Instance.new("UICorner")
    TabButtonCorner.CornerRadius = UDim.new(0, 4)
    TabButtonCorner.Parent = TabButton

    -- Create content page for this category
    local ContentPage = Instance.new("ScrollingFrame")
    ContentPage.Name = name.."Page"
    ContentPage.Size = UDim2.new(1, 0, 1, 0)
    ContentPage.BackgroundTransparency = 1
    ContentPage.BorderSizePixel = 0
    ContentPage.ScrollBarThickness = 3
    ContentPage.ScrollBarImageColor3 = COLORS.Accent
    ContentPage.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be adjusted as modules are added
    ContentPage.Visible = false
    ContentPage.Parent = ContentContainer

    -- Create page layout
    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 8)
    PageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    PageLayout.Parent = ContentPage

    -- Create page padding
    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingTop = UDim.new(0, 8)
    PagePadding.PaddingBottom = UDim.new(0, 8)
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.PaddingRight = UDim.new(0, 10)
    PagePadding.Parent = ContentPage

    -- Update canvas size when items are added
    PageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentPage.CanvasSize = UDim2.new(0, 0, 0, PageLayout.AbsoluteContentSize.Y + 16)
    end)

    -- Store the category page info
    CategoryPages[name] = {
        Button = TabButton,
        Page = ContentPage,
        Modules = {}
    }

    -- Add button click handler
    TabButton.MouseButton1Click:Connect(function()
        -- Deactivate current category
        if ActiveCategory then
            ActiveCategory.Button.BackgroundColor3 = COLORS.Background
            ActiveCategory.Button.TextColor3 = COLORS.Text
            ActiveCategory.Page.Visible = false
        end

        -- Activate this category
        TabButton.BackgroundColor3 = COLORS.Accent
        TabButton.TextColor3 = COLORS.Text
        ContentPage.Visible = true
        ActiveCategory = CategoryPages[name]
    end)

    return CategoryPages[name]
end

-- Create all category tabs
for _, category in ipairs(CategoryInfo) do
    CreateCategoryTab(category.Name, category.LayoutOrder)
end

-- Set the first category as active
if CategoryInfo[1] then
    local firstCategory = CategoryPages[CategoryInfo[1].Name]
    firstCategory.Button.BackgroundColor3 = COLORS.Accent
    firstCategory.Button.TextColor3 = COLORS.Text
    firstCategory.Page.Visible = true
    ActiveCategory = firstCategory
end

-- Update tab list canvas size
TabListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    TabScroll.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y + 10)
end)

-- Add button functionality
CloseButton.MouseButton1Click:Connect(function()
    MainFrame.Visible = false
    MinUI.Visible = true
end)

MinLogo.MouseButton1Click:Connect(function()
    MainFrame.Visible = true
    MinUI.Visible = false
end)

-- Minimize/restore functionality
local IsMinimized = false
MinimizeButton.MouseButton1Click:Connect(function()
    IsMinimized = not IsMinimized

    if IsMinimized then
        MainFrame.Size = UDim2.new(0, 500, 0, 60)
        TabContainer.Visible = false
        ContentContainer.Visible = false
    else
        MainFrame.Size = UDim2.new(0, 500, 0, 300)
        TabContainer.Visible = true
        ContentContainer.Visible = true
    end
end)

-- Utility Functions
function getPing()
    return statsService.PerformanceStats.Ping:GetValue()
end

function getServerPing()
    return statsService.Network.ServerStatsItem['Data Ping']:GetValue()
end

function findClosestBall()
    local lowestDistance = math.huge
    local nearestBall = nil

    local character = player.Character

    for index, ball in pairs(workspace:GetChildren()) do
        if ball.Name ~= "Football" then continue end
        if not ball:IsA("BasePart") then continue end
        if not character:FindFirstChild("HumanoidRootPart") then continue end
        local distance = (ball.Position - character.HumanoidRootPart.Position).Magnitude

        if distance < lowestDistance then
            nearestBall = ball
            lowestDistance = distance
        end
    end

    return nearestBall
end

function findPossessor()
    for index, player in pairs(players:GetPlayers()) do
        local character = player.Character; if not character then continue end
        if not character:FindFirstChildWhichIsA("Tool") then continue end
        return player.Character
    end
end

function getNearestPartToPartFromParts(part, parts)
    local lowestDistance = math.huge
    local nearestPart = nil

    for index, p in pairs(parts) do
        local distance = (part.Position - p.Position).Magnitude

        if distance < lowestDistance then
            nearestPart = p
            lowestDistance = distance
        end
    end

    return nearestPart
end

function beamProjectile(g, v0, x0, t1)
    local c = 0.5*0.5*0.5;
    local p3 = 0.5*g*t1*t1 + v0*t1 + x0;
    local p2 = p3 - (g*t1*t1 + v0*t1)/3;
    local p1 = (c*g*t1*t1 + 0.5*v0*t1 + x0 - c*(x0+p3))/(3*c) - p2;

    local curve0 = (p1 - x0).magnitude;
    local curve1 = (p2 - p3).magnitude;

    local b = (x0 - p3).unit;
    local r1 = (p1 - x0).unit;
    local u1 = r1:Cross(b).unit;
    local r2 = (p2 - p3).unit;
    local u2 = r2:Cross(b).unit;
    b = u1:Cross(r1).unit;

    local cf1 = CFrame.new(
        x0.x, x0.y, x0.z,
        r1.x, u1.x, b.x,
        r1.y, u1.y, b.y,
        r1.z, u1.z, b.z
    )

    local cf2 = CFrame.new(
        p3.x, p3.y, p3.z,
        r2.x, u2.x, b.x,
        r2.y, u2.y, b.y,
        r2.z, u2.z, b.z
    )

    return curve0, -curve1, cf1, cf2;
end

-- Create hitbox visualization part
local part = Instance.new("Part")
part.Transparency = 0.5
part.Anchored = true
part.CanCollide = false
part.CastShadow = false
part.Color = COLORS.Accent -- Light blue color
part.Shape = Enum.PartType.Ball -- Make it a sphere
part.Material = Enum.Material.ForceField -- Nice effect
part.Parent = nil -- Don't put in workspace until needed

-- Create config save/load UI
local ConfigUI = Instance.new("Frame")
ConfigUI.Name = "ConfigUI"
ConfigUI.Size = UDim2.new(0, 250, 0, 120)
ConfigUI.Position = UDim2.new(0.5, -125, 0.5, -60)
ConfigUI.BackgroundColor3 = COLORS.Secondary
ConfigUI.BorderSizePixel = 0
ConfigUI.Visible = false
ConfigUI.ZIndex = 100
ConfigUI.Parent = ScreenGui

-- Add corner radius to config UI
local ConfigCorner = Instance.new("UICorner")
ConfigCorner.CornerRadius = UDim.new(0, 6)
ConfigCorner.Parent = ConfigUI

-- Add config title
local ConfigTitle = Instance.new("TextLabel")
ConfigTitle.Name = "ConfigTitle"
ConfigTitle.Size = UDim2.new(1, 0, 0, 30)
ConfigTitle.BackgroundTransparency = 1
ConfigTitle.Font = Enum.Font.GothamBold
ConfigTitle.Text = "Config"
ConfigTitle.TextColor3 = COLORS.Accent
ConfigTitle.TextSize = 16
ConfigTitle.ZIndex = 101
ConfigTitle.Parent = ConfigUI

-- Add config input
local ConfigInput = Instance.new("TextBox")
ConfigInput.Name = "ConfigInput"
ConfigInput.Size = UDim2.new(0.8, 0, 0, 30)
ConfigInput.Position = UDim2.new(0.1, 0, 0.3, 0)
ConfigInput.BackgroundColor3 = COLORS.Background
ConfigInput.BorderSizePixel = 0
ConfigInput.Font = Enum.Font.GothamSemibold
ConfigInput.PlaceholderText = "Config name..."
ConfigInput.Text = ""
ConfigInput.TextColor3 = COLORS.Text
ConfigInput.TextSize = 14
ConfigInput.ZIndex = 101
ConfigInput.Parent = ConfigUI

-- Add corner radius to config input
local InputCorner = Instance.new("UICorner")
InputCorner.CornerRadius = UDim.new(0, 4)
InputCorner.Parent = ConfigInput

-- Add confirm button
local ConfirmButton = Instance.new("TextButton")
ConfirmButton.Name = "ConfirmButton"
ConfirmButton.Size = UDim2.new(0.6, 0, 0, 28)
ConfirmButton.Position = UDim2.new(0.2, 0, 0.7, 0)
ConfirmButton.BackgroundColor3 = COLORS.Accent
ConfirmButton.BorderSizePixel = 0
ConfirmButton.Font = Enum.Font.GothamSemibold
ConfirmButton.Text = "Confirm"
ConfirmButton.TextColor3 = COLORS.Text
ConfirmButton.TextSize = 14
ConfirmButton.ZIndex = 101
ConfirmButton.Parent = ConfigUI

-- Add corner radius to confirm button
local ConfirmCorner = Instance.new("UICorner")
ConfirmCorner.CornerRadius = UDim.new(0, 4)
ConfirmCorner.Parent = ConfirmButton

local ConfigAction = nil

-- Keep track of all modules and values
local Modules = {}

-- Initialize tracking variables
local fakeBalls = {}
local pullVectoredBalls = {}
local velocity = {}
local isCatching = false

-- Create ping & fps monitor
local PingFpsFrame = Instance.new("Frame")
PingFpsFrame.Name = "PingFpsFrame"
PingFpsFrame.Size = UDim2.new(0, 70, 0, 30)
PingFpsFrame.Position = UDim2.new(1, -85, 0, 5)
PingFpsFrame.BackgroundTransparency = 1
PingFpsFrame.Parent = Header

local PingLabel = Instance.new("TextLabel")
PingLabel.Name = "PingLabel"
PingLabel.Size = UDim2.new(1, 0, 0.5, 0)
PingLabel.BackgroundTransparency = 1
PingLabel.Font = Enum.Font.GothamSemibold
PingLabel.Text = "Ping: 0ms"
PingLabel.TextColor3 = COLORS.SubText
PingLabel.TextSize = 12
PingLabel.TextXAlignment = Enum.TextXAlignment.Right
PingLabel.Parent = PingFpsFrame

local FpsLabel = Instance.new("TextLabel")
FpsLabel.Name = "FpsLabel"
FpsLabel.Size = UDim2.new(1, 0, 0.5, 0)
FpsLabel.Position = UDim2.new(0, 0, 0.5, 0)
FpsLabel.BackgroundTransparency = 1
FpsLabel.Font = Enum.Font.GothamSemibold
FpsLabel.Text = "FPS: 60"
FpsLabel.TextColor3 = COLORS.SubText
FpsLabel.TextSize = 12
FpsLabel.TextXAlignment = Enum.TextXAlignment.Right
FpsLabel.Parent = PingFpsFrame

-- Update ping and fps counters
task.spawn(function()
    while true do
        task.wait(0.1)
        ping = (getPing() + getServerPing()) / 1000
        PingLabel.Text = "Ping: " .. math.floor(ping * 1000) .. "ms"
    end
end)

task.spawn(function()
    runService.RenderStepped:Connect(function()
        fps += 1
        task.delay(1, function()
            fps -= 1
        end)
        FpsLabel.Text = "FPS: " .. fps
    end)
end)

-- Create required modules
-- Module Creation Functions
local function CreateModule(category, name, defaultValue)
    defaultValue = defaultValue or false

    -- Create the module frame
    local ModuleFrame = Instance.new("Frame")
    ModuleFrame.Name = name .. "Module"
    ModuleFrame.Size = UDim2.new(1, 0, 0, 50) -- Initial size, will be adjusted based on content
    ModuleFrame.BackgroundColor3 = COLORS.Secondary
    ModuleFrame.BorderSizePixel = 0
    ModuleFrame.LayoutOrder = #CategoryPages[category].Modules + 1
    ModuleFrame.Parent = CategoryPages[category].Page

    -- Add corner radius
    local ModuleCorner = Instance.new("UICorner")
    ModuleCorner.CornerRadius = UDim.new(0, 6)
    ModuleCorner.Parent = ModuleFrame

    -- Add module title
    local ModuleTitle = Instance.new("TextLabel")
    ModuleTitle.Name = "Title"
    ModuleTitle.Size = UDim2.new(0.6, -10, 0, 30)
    ModuleTitle.Position = UDim2.new(0, 10, 0, 0)
    ModuleTitle.BackgroundTransparency = 1
    ModuleTitle.Font = Enum.Font.GothamSemibold
    ModuleTitle.Text = name
    ModuleTitle.TextColor3 = COLORS.Accent
    ModuleTitle.TextSize = 16
    ModuleTitle.TextXAlignment = Enum.TextXAlignment.Left
    ModuleTitle.Parent = ModuleFrame

    -- Add toggle switch
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = "ToggleFrame"
    ToggleFrame.Size = UDim2.new(0, 36, 0, 20)
    ToggleFrame.Position = UDim2.new(1, -46, 0, 5)
    ToggleFrame.BackgroundColor3 = defaultValue and COLORS.Accent or COLORS.Background
    ToggleFrame.BorderSizePixel = 0
    ToggleFrame.Parent = ModuleFrame

    -- Add corner radius to toggle
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleFrame

    -- Add toggle indicator
    local ToggleIndicator = Instance.new("Frame")
    ToggleIndicator.Name = "Indicator"
    ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
    ToggleIndicator.Position = UDim2.new(defaultValue and 1 or 0, defaultValue and -18 or 2, 0.5, -8)
    ToggleIndicator.BackgroundColor3 = COLORS.Text
    ToggleIndicator.BorderSizePixel = 0
    ToggleIndicator.Parent = ToggleFrame

    -- Add corner radius to indicator
    local IndicatorCorner = Instance.new("UICorner")
    IndicatorCorner.CornerRadius = UDim.new(1, 0)
    IndicatorCorner.Parent = ToggleIndicator

    -- Add content container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, -20, 1, -30)
    ContentContainer.Position = UDim2.new(0, 10, 0, 30)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Parent = ModuleFrame

    -- Add layout for content
    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.Padding = UDim.new(0, 8)
    ContentLayout.FillDirection = Enum.FillDirection.Vertical
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Parent = ContentContainer

    -- Create module info
    local module = {
        Frame = ModuleFrame,
        Toggle = ToggleFrame,
        Indicator = ToggleIndicator,
        Container = ContentContainer,
        Value = defaultValue,
        Controls = {},
        Name = name
    }

    -- Add to modules list and category modules
    Modules[name] = module
    table.insert(CategoryPages[category].Modules, module)

    -- Make toggle clickable
    ToggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            module.Value = not module.Value

            -- Animate the toggle
            local targetPos = module.Value and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
            local targetColor = module.Value and COLORS.Accent or COLORS.Background

            tweenService:Create(
                ToggleIndicator,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = targetPos}
            ):Play()

            tweenService:Create(
                ToggleFrame,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = targetColor}
            ):Play()
        end
    end)

    -- Update module height based on content
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ModuleFrame.Size = UDim2.new(1, 0, 0, 30 + ContentLayout.AbsoluteContentSize.Y + 10)
    end)

    return module
end

-- Function to create a slider control
local function CreateSlider(module, name, min, max, default)
    min = min or 0
    max = max or 100
    default = math.clamp(default or min, min, max)

    -- Create container
    local SliderContainer = Instance.new("Frame")
    SliderContainer.Name = name .. "Container"
    SliderContainer.Size = UDim2.new(1, 0, 0, 35)
    SliderContainer.BackgroundTransparency = 1
    SliderContainer.LayoutOrder = #module.Controls + 1
    SliderContainer.Parent = module.Container

    -- Create title
    local SliderTitle = Instance.new("TextLabel")
    SliderTitle.Name = "Title"
    SliderTitle.Size = UDim2.new(0.7, 0, 0, 20)
    SliderTitle.Position = UDim2.new(0, 0, 0, 0)
    SliderTitle.BackgroundTransparency = 1
    SliderTitle.Font = Enum.Font.GothamSemibold
    SliderTitle.Text = name
    SliderTitle.TextColor3 = COLORS.Text
    SliderTitle.TextSize = 14
    SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
    SliderTitle.Parent = SliderContainer

    -- Create value label
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Name = "Value"
    ValueLabel.Size = UDim2.new(0.3, 0, 0, 20)
    ValueLabel.Position = UDim2.new(0.7, 0, 0, 0)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Font = Enum.Font.GothamSemibold
    ValueLabel.Text = tostring(default)
    ValueLabel.TextColor3 = COLORS.Accent
    ValueLabel.TextSize = 14
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = SliderContainer

    -- Create slider background
    local SliderBack = Instance.new("Frame")
    SliderBack.Name = "Background"
    SliderBack.Size = UDim2.new(1, 0, 0, 8)
    SliderBack.Position = UDim2.new(0, 0, 0, 25)
    SliderBack.BackgroundColor3 = COLORS.Background
    SliderBack.BorderSizePixel = 0
    SliderBack.Parent = SliderContainer

    -- Add corner radius to background
    local BackCorner = Instance.new("UICorner")
    BackCorner.CornerRadius = UDim.new(1, 0)
    BackCorner.Parent = SliderBack

    -- Create fill
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "Fill"
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    SliderFill.BackgroundColor3 = COLORS.Accent
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBack

    -- Add corner radius to fill
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(1, 0)
    FillCorner.Parent = SliderFill

    -- Create knob
    local SliderKnob = Instance.new("Frame")
    SliderKnob.Name = "Knob"
    SliderKnob.Size = UDim2.new(0, 14, 0, 14)
    SliderKnob.Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0)
    SliderKnob.AnchorPoint = Vector2.new(0.5, 0.5)
    SliderKnob.BackgroundColor3 = COLORS.Text
    SliderKnob.BorderSizePixel = 0
    SliderKnob.Parent = SliderBack

    -- Add corner radius to knob
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(1, 0)
    KnobCorner.Parent = SliderKnob

    -- Create slider info
    local slider = {
        Container = SliderContainer,
        Background = SliderBack,
        Fill = SliderFill,
        Knob = SliderKnob,
        Value = default,
        Min = min,
        Max = max,
        Title = name,
        ValueLabel = ValueLabel
    }

    -- Add to module controls
    table.insert(module.Controls, slider)

    -- Make slider interactive
    local isDragging = false

    local function updateSlider(x)
        local relX = math.clamp((x - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
        local value

        -- Integer slider if min and max are integers
        if math.floor(min) == min and math.floor(max) == max then
            value = math.floor(min + relX * (max - min) + 0.5)
        else
            value = min + relX * (max - min)
        end

        slider.Value = value
        ValueLabel.Text = tostring(value)
        SliderFill.Size = UDim2.new(relX, 0, 1, 0)
        SliderKnob.Position = UDim2.new(relX, 0, 0.5, 0)
    end

    SliderBack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            updateSlider(input.Position.X)
        end
    end)

    SliderBack.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)

    SliderKnob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
        end
    end)

    SliderKnob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)

    userInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
            updateSlider(input.Position.X)
        end
    end)

    return slider
end

-- Function to create a dropdown control
local function CreateDropdown(module, name, options, default)
    options = options or {"Option 1", "Option 2"}
    default = default or options[1]

    -- Create container
    local DropContainer = Instance.new("Frame")
    DropContainer.Name = name .. "Container"
    DropContainer.Size = UDim2.new(1, 0, 0, 60)
    DropContainer.BackgroundTransparency = 1
    DropContainer.LayoutOrder = #module.Controls + 1
    DropContainer.Parent = module.Container

    -- Create title
    local DropTitle = Instance.new("TextLabel")
    DropTitle.Name = "Title"
    DropTitle.Size = UDim2.new(1, 0, 0, 20)
    DropTitle.BackgroundTransparency = 1
    DropTitle.Font = Enum.Font.GothamSemibold
    DropTitle.Text = name
    DropTitle.TextColor3 = COLORS.Text
    DropTitle.TextSize = 14
    DropTitle.TextXAlignment = Enum.TextXAlignment.Left
    DropTitle.Parent = DropContainer

    -- Create dropdown button
    local DropButton = Instance.new("TextButton")
    DropButton.Name = "Button"
    DropButton.Size = UDim2.new(1, 0, 0, 30)
    DropButton.Position = UDim2.new(0, 0, 0, 25)
    DropButton.BackgroundColor3 = COLORS.Background
    DropButton.BorderSizePixel = 0
    DropButton.Font = Enum.Font.GothamSemibold
    DropButton.Text = default
    DropButton.TextColor3 = COLORS.Text
    DropButton.TextSize = 14
    DropButton.TextXAlignment = Enum.TextXAlignment.Left
    DropButton.Parent = DropContainer

    -- Add padding to button text
    local TextPadding = Instance.new("UIPadding")
    TextPadding.PaddingLeft = UDim.new(0, 8)
    TextPadding.Parent = DropButton

    -- Add corner radius
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 4)
    ButtonCorner.Parent = DropButton

    -- Create arrow icon
    local ArrowIcon = Instance.new("ImageLabel")
    ArrowIcon.Name = "Arrow"
    ArrowIcon.Size = UDim2.new(0, 12, 0, 12)
    ArrowIcon.Position = UDim2.new(1, -20, 0.5, -6)
    ArrowIcon.BackgroundTransparency = 1
    ArrowIcon.Image = "rbxassetid://6031091004"
    ArrowIcon.ImageColor3 = COLORS.Accent
    ArrowIcon.Parent = DropButton

    -- Create dropdown
    local DropList = Instance.new("Frame")
    DropList.Name = "DropList"
    DropList.Size = UDim2.new(1, 0, 0, #options * 30)
    DropList.Position = UDim2.new(0, 0, 1, 5)
    DropList.BackgroundColor3 = COLORS.Background
    DropList.BorderSizePixel = 0
    DropList.ZIndex = 10
    DropList.Visible = false
    DropList.Parent = DropButton

    -- Add corner radius to dropdown
    local ListCorner = Instance.new("UICorner")
    ListCorner.CornerRadius = UDim.new(0, 4)
    ListCorner.Parent = DropList

    -- Create layout
    local OptionLayout = Instance.new("UIListLayout")
    OptionLayout.Padding = UDim.new(0, 0)
    OptionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    OptionLayout.Parent = DropList

    -- Create dropdown info
    local dropdown = {
        Container = DropContainer,
        Button = DropButton,
        List = DropList,
        Value = default,
        Title = name,
        Options = {}
    }

    -- Add to module controls
    table.insert(module.Controls, dropdown)

    -- Add options
    for i, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Name = option .. "Option"
        OptionButton.Size = UDim2.new(1, 0, 0, 30)
        OptionButton.BackgroundTransparency = 1
        OptionButton.Font = Enum.Font.GothamSemibold
        OptionButton.Text = option
        OptionButton.TextColor3 = option == default and COLORS.Accent or COLORS.Text
        OptionButton.TextSize = 14
        OptionButton.ZIndex = 11
        OptionButton.LayoutOrder = i
        OptionButton.Parent = DropList

        -- Add padding
        local OptionPadding = Instance.new("UIPadding")
        OptionPadding.PaddingLeft = UDim.new(0, 8)
        OptionPadding.Parent = OptionButton

        -- Add hover effect
        OptionButton.MouseEnter:Connect(function()
            OptionButton.BackgroundTransparency = 0.8
        end)

        OptionButton.MouseLeave:Connect(function()
            OptionButton.BackgroundTransparency = 1
        end)

        -- Add click behavior
        OptionButton.MouseButton1Click:Connect(function()
            dropdown.Value = option
            DropButton.Text = option

            -- Update colors
            for _, btn in pairs(DropList:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.TextColor3 = btn.Text == option and COLORS.Accent or COLORS.Text
                end
            end

            DropList.Visible = false
        end)

        table.insert(dropdown.Options, OptionButton)
    end

    -- Toggle dropdown visibility
    DropButton.MouseButton1Click:Connect(function()
        DropList.Visible = not DropList.Visible
    end)

    -- Close dropdown when clicking elsewhere
    userInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = userInputService:GetMouseLocation()
            if DropList.Visible then
                local dropListPos = DropList.AbsolutePosition
                local dropListSize = DropList.AbsoluteSize
                local dropButtonPos = DropButton.AbsolutePosition
                local dropButtonSize = DropButton.AbsoluteSize

                if not (
                    (mousePos.X >= dropListPos.X and mousePos.X <= dropListPos.X + dropListSize.X and
                     mousePos.Y >= dropListPos.Y and mousePos.Y <= dropListPos.Y + dropListSize.Y) or
                    (mousePos.X >= dropButtonPos.X and mousePos.X <= dropButtonPos.X + dropButtonSize.X and
                     mousePos.Y >= dropButtonPos.Y and mousePos.Y <= dropButtonPos.Y + dropButtonSize.Y)
                ) then
                    DropList.Visible = false
                end
            end
        end
    end)

    return dropdown
end

-- Function to create a keybind control
local function CreateKeybind(module, name, defaultKey)
    defaultKey = defaultKey or Enum.KeyCode.F

    -- Create container
    local KeyContainer = Instance.new("Frame")
    KeyContainer.Name = name .. "Container"
    KeyContainer.Size = UDim2.new(1, 0, 0, 55)
    KeyContainer.BackgroundTransparency = 1
    KeyContainer.LayoutOrder = #module.Controls + 1
    KeyContainer.Parent = module.Container

    -- Create title
    local KeyTitle = Instance.new("TextLabel")
    KeyTitle.Name = "Title"
    KeyTitle.Size = UDim2.new(1, 0, 0, 20)
    KeyTitle.BackgroundTransparency = 1
    KeyTitle.Font = Enum.Font.GothamSemibold
    KeyTitle.Text = name
    KeyTitle.TextColor3 = COLORS.Text
    KeyTitle.TextSize = 14
    KeyTitle.TextXAlignment = Enum.TextXAlignment.Left
    KeyTitle.Parent = KeyContainer

    -- Create key button
    local KeyButton = Instance.new("TextButton")
    KeyButton.Name = "Button"
    KeyButton.Size = UDim2.new(1, 0, 0, 30)
    KeyButton.Position = UDim2.new(0, 0, 0, 25)
    KeyButton.BackgroundColor3 = COLORS.Background
    KeyButton.BorderSizePixel = 0
    KeyButton.Font = Enum.Font.GothamSemibold
    KeyButton.Text = defaultKey.Name
    KeyButton.TextColor3 = COLORS.Text
    KeyButton.TextSize = 14
    KeyButton.Parent = KeyContainer

    -- Add corner radius
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 4)
    ButtonCorner.Parent = KeyButton

    -- Create keybind info
    local keybind = {
        Container = KeyContainer,
        Button = KeyButton,
        Value = defaultKey,
        Title = name,
        Listening = false
    }

    -- Add to module controls
    table.insert(module.Controls, keybind)

    -- Start listening for keys
    KeyButton.MouseButton1Click:Connect(function()
        keybind.Listening = true
        KeyButton.Text = "..."
        KeyButton.TextColor3 = COLORS.Accent
    end)

    -- Listen for key press
    userInputService.InputBegan:Connect(function(input)
        if keybind.Listening and input.UserInputType == Enum.UserInputType.Keyboard then
            keybind.Value = input.KeyCode
            KeyButton.Text = input.KeyCode.Name
            KeyButton.TextColor3 = COLORS.Text
            keybind.Listening = false
        end
    end)

    return keybind
end

-- Initialize modules
-- Catching category modules
local magnetsModule = CreateModule("Catching", "Magnets")
local magnetsTypeDropdown = CreateDropdown(magnetsModule, "Type", {"Blatant", "Legit", "League"}, "Legit")
local magnetsCustomRadiusSlider = CreateSlider(magnetsModule, "Radius", 0, 70, 20)
local showMagHitboxModule = CreateModule("Catching", "Visualize Hitbox")

local pullVectorModule = CreateModule("Catching", "PullVector")
local pullVectorDistanceSlider = CreateSlider(pullVectorModule, "Distance", 0, 100, 50)
local pullVectorTypeDropdown = CreateDropdown(pullVectorModule, "Type", {"Glide", "Teleport"}, "Glide")
local pullVectorPowerSlider = CreateSlider(pullVectorModule, "Power", 1, 5, 3)

-- Physics category modules
local quickTPModule = CreateModule("Physics", "QuickTP")
local quickTPSpeedSlider = CreateSlider(quickTPModule, "Speed", 1, 5, 3)
local quickTPBindKeybind = CreateKeybind(quickTPModule, "Keybind", Enum.KeyCode.F)

local clickTackleAimbotModule = CreateModule("Physics", "ClickTackleAimbot")
local clickTackleAimbotDistanceSlider = CreateSlider(clickTackleAimbotModule, "Distance", 0, 15, 8)

local antiJamModule = CreateModule("Physics", "AntiJam")
local antiBlockModule = CreateModule("Physics", "AntiBlock")
local visualiseBallPathModule = CreateModule("Physics", "VisualiseBallPath")
local noJumpCooldownModule = CreateModule("Physics", "NoJumpCooldown")
local noFreezeModule = CreateModule("Physics", "NoFreeze")

local optimalJumpPredictionsModule = CreateModule("Physics", "OptimalJump")
local optimalJumpTypeDropdown = CreateDropdown(optimalJumpPredictionsModule, "Type", {"Jump", "Dive"}, "Jump")

local noBallTrailModule = CreateModule("Physics", "NoBallTrail")
local bigHeadModule = CreateModule("Physics", "BigHead")
local bigHeadSizeSlider = CreateSlider(bigHeadModule, "Size", 1, 5, 3)

-- Player category modules
local angleAssistModule = CreateModule("Player", "AngleAssist")
local angleAssistJPSlider = CreateSlider(angleAssistModule, "JP", 50, 70, 60)

local speedModule = CreateModule("Player", "Speed")
local speedValueSlider = CreateSlider(speedModule, "Speed", 20, 23, 21)

local jumpPowerModule = CreateModule("Player", "JumpPower")
local jumpPowerValueSlider = CreateSlider(jumpPowerModule, "Power", 50, 70, 60)

-- Auto category module
local autoCapModule = CreateModule("Auto", "AutoCap")

-- Throwing category module
local qbAimbotModule = CreateModule("Throwing", "QB Aimbot")
CreateDropdown(qbAimbotModule, "Status", {"Coming Soon"}, "Coming Soon")

-- Configs category modules
local saveConfigModule = CreateModule("Configs", "Save Config")
local loadConfigModule = CreateModule("Configs", "Load Config")

-- Config saving and loading
local function saveConfig(configName)
    local config = {}

    -- Save all module states
    for name, module in pairs(Modules) do
        config[name] = {
            Enabled = module.Value
        }

        -- Save all control values
        if module.Controls then
            config[name].Controls = {}
            for _, control in pairs(module.Controls) do
                config[name].Controls[_ .. "|" .. control.Title or _] = control.Value
            end
        end
    end

    -- Save to file
    writefile("eclipsehub/"..configName..".json", httpService:JSONEncode(config))
end

local function loadConfig(configName)
    if not isfile("eclipsehub/"..configName..".json") then return false end

    local config = httpService:JSONDecode(readfile("eclipsehub/"..configName..".json"))

    -- Load all module states
    for name, data in pairs(config) do
        local module = Modules[name]
        if module then
            -- Set module state
            module.Value = data.Enabled

            -- Update toggle appearance
            tweenService:Create(
                module.Toggle,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = data.Enabled and COLORS.Accent or COLORS.Background}
            ):Play()

            tweenService:Create(
                module.Indicator,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = data.Enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)}
            ):Play()

            -- Load all control values if available
            if data.Controls and module.Controls then
                for key, value in pairs(data.Controls) do
                    for idx, control in pairs(module.Controls) do
                        local controlKey = idx .. "|" .. (control.Title or idx)
                        if key == controlKey then
                            control.Value = value

                            -- Update control display based on type
                            if control.ValueLabel then
                                -- Slider
                                control.ValueLabel.Text = tostring(value)
                                local relX = (value - control.Min) / (control.Max - control.Min)
                                control.Fill.Size = UDim2.new(relX, 0, 1, 0)
                                control.Knob.Position = UDim2.new(relX, 0, 0.5, 0)
                            elseif control.Button then
                                -- Keybind or Dropdown
                                if control.Listening ~= nil then
                                    -- Keybind
                                    control.Button.Text = value.Name
                                else
                                    -- Dropdown
                                    control.Button.Text = value
                                    -- Update options colors
                                    for _, option in pairs(control.Options) do
                                        option.TextColor3 = option.Text == value and COLORS.Accent or COLORS.Text
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    return true
end

-- Set up config UI callbacks
saveConfigModule.Toggle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and saveConfigModule.Value then
        ConfigAction = "save"
        ConfigTitle.Text = "Save Config"
        ConfigUI.Visible = true
        ConfigInput.Text = ""
    end
end)

loadConfigModule.Toggle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and loadConfigModule.Value then
        ConfigAction = "load"
        ConfigTitle.Text = "Load Config"
        ConfigUI.Visible = true
        ConfigInput.Text = ""
    end
end)

ConfirmButton.MouseButton1Click:Connect(function()
    local configName = ConfigInput.Text
    if configName == "" then return end

    if ConfigAction == "save" then
        saveConfig(configName)
    elseif ConfigAction == "load" then
        loadConfig(configName)
    end

    ConfigUI.Visible = false
end)

-- Add notification when script is loaded
local NotifFrame = Instance.new("Frame")
NotifFrame.Name = "Notification"
NotifFrame.Size = UDim2.new(0, 300, 0, 50)
NotifFrame.Position = UDim2.new(0.5, -150, 0, -60)
NotifFrame.BackgroundColor3 = COLORS.Secondary
NotifFrame.BorderSizePixel = 0
NotifFrame.Parent = ScreenGui
NotifFrame.ZIndex = 100

-- Add corner radius
local NotifCorner = Instance.new("UICorner")
NotifCorner.CornerRadius = UDim.new(0, 8)
NotifCorner.Parent = NotifFrame

-- Add notification text
local NotifText = Instance.new("TextLabel")
NotifText.Size = UDim2.new(1, 0, 1, 0)
NotifText.BackgroundTransparency = 1
NotifText.Font = Enum.Font.GothamBold
NotifText.Text = "Eclipse Hub Loaded!"
NotifText.TextColor3 = COLORS.Accent
NotifText.TextSize = 18
NotifText.ZIndex = 101
NotifText.Parent = NotifFrame

-- Animate notification in and out
tweenService:Create(
    NotifFrame,
    TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    {Position = UDim2.new(0.5, -150, 0, 20)}
):Play()

task.delay(3, function()
    tweenService:Create(
        NotifFrame,
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
        {Position = UDim2.new(0.5, -150, 0, -60)}
    ):Play()

    task.delay(0.6, function()
        NotifFrame:Destroy()
    end)
end)

-- Character state tracking for catching
local function onCharacterCatching(character)
    local arm = character:WaitForChild('Left Arm')

    arm.ChildAdded:Connect(function(child)
        if not child:IsA("Weld") then return end
        isCatching = true
        task.wait(1.7)
        isCatching = false
    end)
end

onCharacterCatching(player.Character or player.CharacterAdded:Wait())
player.CharacterAdded:Connect(onCharacterCatching)

firetouchinterest = (IS_SOLARA) and function(part2, part1, state)
    if AC_BYPASS then
        part1.CFrame = part2.CFrame
    else
        state = state == 1
        local fakeBall = fakeBalls[part1]
        if not fakeBall then return end

        local direction = (part2.Position - fakeBall.Position).Unit
        local distance = (part2.Position - fakeBall.Position).Magnitude

        for i = 1,5,1 do
            local percentage = i/5 + Random.new():NextNumber(0.01, 0.02)
            part1.CFrame = fakeBall.CFrame + (direction * distance * percentage)
        end
    end
end or firetouchinterest

-- Ball tracking and fake ball implementation
workspace.ChildAdded:Connect(function(ball)
    if ball.Name ~= "Football" then return end
    if not ball:IsA("BasePart") then return end
    task.wait()

    local lastPosition = ball.Position
    local lastCheck = os.clock()
    local initalVelocity = ball.AssemblyLinearVelocity

    if (IS_SOLARA) and ball:FindFirstChildWhichIsA("Trail") and not ball.Anchored and camera.CameraSubject ~= ball then
        local fakeBall = ball:Clone()
        fakeBall.Name = "FFootball"
        fakeBall.Parent = workspace
        fakeBall.Anchored = true
        fakeBall.CanCollide = false
        fakeBall:FindFirstChildWhichIsA('PointLight'):Destroy()
        ball.Transparency = 1
        local spiralDegrees = 0
        fakeBalls[ball] = fakeBall
        task.spawn(function()
            while ball.Parent == workspace do
                local dt = runService.Heartbeat:Wait()
                spiralDegrees += 1500 * dt
                initalVelocity += Vector3.new(0, -28 * dt, 0)
                fakeBall.Position += initalVelocity * dt
                fakeBall.CFrame = CFrame.lookAt(fakeBall.Position, fakeBall.Position + initalVelocity) * CFrame.Angles(math.rad(90), math.rad(spiralDegrees), 0)

                if ball:FindFirstChildWhichIsA("Trail") then
                    ball:FindFirstChildWhichIsA("Trail").Enabled = not noBallTrailModule.Value
                end
            end
            fakeBall:Destroy()
        end)
    end

    while ball.Parent do
        task.wait(0.1)

        local t = (os.clock() - lastCheck)
        velocity[ball] = (ball.Position - lastPosition) / t

        lastCheck = os.clock()
        lastPosition = ball.Position
    end
end)

-- Implement magnets functionality
task.spawn(function()
    while true do
        task.wait(1/60)
        local ball = findClosestBall(); if not ball then part.Parent = nil continue end
        local character = player.Character

        if not character then continue end

        local catchPart = getNearestPartToPartFromParts(ball, {character:FindFirstChild("CatchLeft"), character:FindFirstChild("CatchRight")})

        if not catchPart then continue end
        if not velocity[ball] then continue end
        if not magnetsModule.Value then
            part.Parent = nil
            continue
        end

        if magnetsTypeDropdown.Value == "League" then
            local predictedPosition = (fakeBalls[ball] or ball).Position + (velocity[ball] * ping)
            local distance = (catchPart.Position - predictedPosition).Magnitude

            -- Position the hitbox directly at the ball position, not in front of it
            part.Position = (fakeBalls[ball] or ball).Position
            part.Size = Vector3.new(magnetsCustomRadiusSlider.Value, magnetsCustomRadiusSlider.Value, magnetsCustomRadiusSlider.Value)
            part.Parent = showMagHitboxModule.Value and workspace or nil
            part.Color = COLORS.Accent -- Light blue color
            part.Material = Enum.Material.ForceField -- Use ForceField for smoother edge appearance
            part.Transparency = 0.5 -- Adjust transparency to make it slightly more visible

            if distance > magnetsCustomRadiusSlider.Value then continue end

            firetouchinterest(catchPart, ball, 0)
            firetouchinterest(catchPart, ball, 1)
        else
            local distance = (catchPart.Position - ball.Position).Magnitude
            local radius = (magnetsTypeDropdown.Value == "Blatant" and 50 or 6)

            -- Position the hitbox directly at the ball position
            part.Position = (fakeBalls[ball] or ball).Position
            part.Size = Vector3.new(radius, radius, radius)
            part.Parent = showMagHitboxModule.Value and workspace or nil
            part.Color = COLORS.Accent -- Light blue color
            part.Material = Enum.Material.ForceField -- Use ForceField for smoother edge appearance
            part.Transparency = 0.5 -- Adjust transparency to make it slightly more visible

            if not isCatching and IS_SOLARA then continue end

            if distance < radius then
                firetouchinterest(catchPart, ball, 0)
                firetouchinterest(catchPart, ball, 1)
            end
        end
    end
end)

-- Implement pull vector functionality
task.spawn(function()
    while true do
        task.wait()
        local ball = findClosestBall() if not ball then continue end
        local character = player.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

        if not ball:FindFirstChildWhichIsA("Trail") then continue end
        if not character or not humanoidRootPart then continue end
        if not pullVectorModule.Value then continue end
        if pullVectoredBalls[ball] then continue end
        if ball.Anchored then continue end

        local distance = (humanoidRootPart.Position - ball.Position).Magnitude
        if distance > pullVectorDistanceSlider.Value then continue end

        local direction = (ball.Position - humanoidRootPart.Position).Unit

        if pullVectorTypeDropdown.Value == "Teleport" then
            pullVectoredBalls[ball] = true
            local distance = 10 + ((pullVectorPowerSlider.Value - 1) * 5)
            humanoidRootPart.CFrame += direction * distance
        else
            humanoidRootPart.AssemblyLinearVelocity = direction * pullVectorPowerSlider.Value * 25
        end
    end
end)
